{{/*
MIT License

(C) Copyright 2022 Hewlett Packard Enterprise Development LP

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/}}
{{- if .Values.sqlCluster.enabled -}}
{{- $root := . -}}
{{- if .Values.sqlCluster.tls.enabled -}}
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: "{{ include "cray-service.fullname" $root }}-postgres-tls"
spec:
  secretName: "{{ include "cray-service.fullname" $root }}-postgres-tls"
  duration: 720h
  renewBefore: 24h
  organization:
    - Cray
  commonName: "{{ include "cray-service.fullname" $root }}-postgres.{{ .Release.Namespace }}.cluster.svc"
  isCA: false
  keySize: 2048
  keyAlgorithm: rsa
  keyEncoding: pkcs1
  usages:
    - server auth
    - client auth
  dnsNames:
    - "{{ include "cray-service.fullname" $root }}-postgres.{{ .Release.Namespace }}.cluster.svc"
    - "{{ include "cray-service.fullname" $root }}-postgres.{{ .Release.Namespace }}"
    - "*.{{ include "cray-service.fullname" $root }}-postgres.{{ .Release.Namespace }}"
  issuerRef:
    name: "{{ .Values.sqlCluster.tls.issuer }}"
    kind: Issuer
{{ end }}
---
apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: "{{ include "cray-service.fullname" . }}-postgres"
  labels:
    app.kubernetes.io/name: {{ include "cray-service.fullname" . }}-postgres
    {{- include "cray-service.common-labels" . | nindent 4 }}
    {{- with .Values.sqlCluster.labels -}}
    {{ toYaml . | nindent 4 -}}
    {{- end }}
spec:
  teamId: "{{ include "cray-service.fullname" . }}"
  volume:
    size: {{ .Values.sqlCluster.volumeSize }}
  numberOfInstances: {{ .Values.sqlCluster.instanceCount }}
{{- if .Values.sqlCluster.podPriorityClassName }}
  podPriorityClassName: {{ .Values.sqlCluster.podPriorityClassName }}
{{- end }}
  {{- if .Values.sqlCluster.resources }}
  {{- with .Values.sqlCluster.resources }}
  resources:
    {{- toYaml . | nindent 4 }}
  {{- end -}}
  {{- end }}
  users:
    {{- with .Values.sqlCluster.users -}}
    {{ toYaml . | nindent 4 -}}
    {{- end }}
  databases:
    {{- with .Values.sqlCluster.databases -}}
    {{ toYaml . | nindent 4 -}}
    {{- end }}

  {{- if .Values.sqlCluster.connectionPooler.enabled }}
  enableConnectionPooler: true
  connectionPooler:
    numberOfInstances: {{ .Values.sqlCluster.connectionPooler.instanceCount }}
    mode: "{{ .Values.sqlCluster.connectionPooler.mode }}"
    dockerImage: "{{ .Values.sqlCluster.connectionPooler.image }}"
  {{- end }}

  postgresql:
    version: {{ .Values.sqlCluster.postgresVersion | quote }}
    {{- if .Values.sqlCluster.parameters }}
    {{- with .Values.sqlCluster.parameters }}
    parameters:
      {{- toYaml . | nindent 6 }}
    {{- end -}}
    {{- end }}

{{- if .Values.sqlCluster.tls.enabled }}

  tls:
    secretName: "{{ include "cray-service.fullname" $root }}-postgres-tls"
{{- end }}
{{ range $i, $e := until (int .Values.sqlCluster.instanceCount) }}
---
kind: Service
apiVersion: v1
metadata:
  name: "{{ include "cray-service.fullname" $root }}-postgres-{{ $e }}"
  labels:
    cluster-name: "{{ include "cray-service.fullname" $root }}"
    role: pod
spec:
  selector:
    statefulset.kubernetes.io/pod-name: "{{ include "cray-service.fullname" $root }}-postgres-{{$e}}"
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
{{ end }}
---
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "{{ include "cray-service.fullname" $root }}-postgres-pods"
spec:
  selector:
    matchLabels:
      cluster-name: "{{ include "cray-service.fullname" $root }}"
      role: pod
  portLevelMtls:
    5432:
      mode: PERMISSIVE
---
apiVersion: "security.istio.io/v1beta1"
kind: "PeerAuthentication"
metadata:
  name: "{{ include "cray-service.fullname" $root }}-postgres"
spec:
  selector:
    matchLabels:
      application: spilo
      cluster-name: "{{ include "cray-service.fullname" $root }}-postgres"
      team: "{{ include "cray-service.fullname" $root }}"
  portLevelMtls:
    5432:
      mode: PERMISSIVE
{{- if .Values.sqlCluster.waitForItJob }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "cray-service.fullname" . }}-wait-for-postgres-{{ .Release.Revision }}"
  labels:
    app.kubernetes.io/name: {{ include "cray-service.fullname" . }}-wait-for-postgres
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        {{- range .Values.sqlCluster.databases | keys }}
        {{- $database := . }}
        {{- $user := index $root.Values.sqlCluster.databases $database }}
        - name: postgres-watcher-{{ $database | replace "_" "-" }}
          image: {{ $root.Values.sqlCluster.image.repository }}:{{ $root.Values.sqlCluster.image.tag }}
          imagePullPolicy: {{ $root.Values.sqlCluster.image.pullPolicy }}
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            runAsNonRoot: true
          command: ["sh", "-c", "until psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB -c 'select version();'; do echo waiting for postgres db $POSTGRES_DB; sleep 2; done;  echo 'POSTGRES_READY';"]
          env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ $user | replace "_" "-" }}.{{ include "cray-service.fullname" $root }}-postgres.credentials
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $user | replace "_" "-" }}.{{ include "cray-service.fullname" $root }}-postgres.credentials
                key: password
          - name: POSTGRES_HOST
            value: "{{ include "cray-service.fullname" $root }}-postgres"
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: "{{ $database }}"
          resources:
            requests:
              cpu: 100m
              memory: "10Mi"
            limits:
              cpu: 500m
              memory: "1Gi"
        {{- end }}
{{- end }}
{{- if .Values.sqlCluster.connectionPooler.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cray-service.fullname" $root }}-postgres-sqlscripts
  labels:
    app.kubernetes.io/name: {{ include "cray-service.fullname" . }}-postgres
    {{- include "cray-service.common-labels" . | nindent 4 }}
    {{- with .Values.sqlCluster.labels -}}
    {{ toYaml . | nindent 4 -}}
    {{- end }}
data:
  pooler-schema.sql: |-
    SELECT current_database();
    CREATE SCHEMA IF NOT EXISTS pooler;
    CREATE OR REPLACE FUNCTION pooler.user_lookup(in i_username text, out uname text, out phash text) RETURNS record AS $$
    BEGIN
      SELECT usename, passwd FROM pg_catalog.pg_shadow
      WHERE usename = i_username INTO uname, phash;
      RETURN;
    END;
    $$ LANGUAGE plpgsql SECURITY DEFINER;

    REVOKE ALL ON FUNCTION pooler.user_lookup(text)
      FROM public, pooler;
    GRANT EXECUTE ON FUNCTION pooler.user_lookup(text)
      TO pooler;
    GRANT USAGE ON SCHEMA pooler TO pooler;
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "cray-service.fullname" . }}-create-pooler-schema-{{ .Release.Revision }}"
  labels:
    app.kubernetes.io/name: {{ include "cray-service.fullname" . }}-create-pooler-schema
spec:
  template:
    spec:
      restartPolicy: Never
      volumes:
        - name: sqlscripts
          configMap:
            name: {{ include "cray-service.fullname" $root }}-postgres-sqlscripts
      containers:
        {{- range .Values.sqlCluster.databases | keys }}
        {{- $database := . }}
        {{- $user := index $root.Values.sqlCluster.databases $database }}
        - name: postgres-create-pooler-schema-{{ $database | replace "_" "-" }}
          image: {{ $root.Values.sqlCluster.image.repository }}:{{ $root.Values.sqlCluster.image.tag }}
          imagePullPolicy: {{ $root.Values.sqlCluster.image.pullPolicy }}
          command: ["sh", "-c", "until psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB -c 'select version();'; do echo waiting for postgres db $POSTGRES_DB; sleep 2; done; sleep 60;psql postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB -f /scripts/pooler-schema.sql"]
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres.{{ include "cray-service.fullname" $root }}-postgres.credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres.{{ include "cray-service.fullname" $root }}-postgres.credentials
                  key: password
            - name: POSTGRES_HOST
              value: "{{ include "cray-service.fullname" $root }}-postgres"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB
              value: "{{ $database }}"
          resources:
            requests:
              cpu: 100m
              memory: "10Mi"
            limits:
              cpu: 500m
              memory: "1Gi"
          volumeMounts:
            - name: sqlscripts
              mountPath: /scripts
              readOnly: true
        {{- end }}
{{- end }}
{{- end }}
